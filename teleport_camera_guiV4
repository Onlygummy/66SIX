local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local ContextActionService = game:GetService("ContextActionService")
local Camera = game:GetService("Workspace").CurrentCamera
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")

-- GUI Setup
local ScreenGui = Instance.new("ScreenGui")
ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
ScreenGui.Name = "CyberSpyGUI"
ScreenGui.ResetOnSpawn = false
ScreenGui.IgnoreGuiInset = true -- Avoid interference from game GUI

local Frame = Instance.new("Frame")
Frame.Size = UDim2.new(0, 300, 0, 250)
Frame.Position = UDim2.new(0, 10, 0, 10)
Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
Frame.BackgroundTransparency = 1 -- Start hidden

local gradient = Instance.new("UIGradient")
gradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 0, 50)), ColorSequenceKeypoint.new(1, Color3.fromRGB(100, 0, 0))}
gradient.Parent = Frame
Frame.Parent = ScreenGui

local Drag = Instance.new("TextButton")
Drag.Size = UDim2.new(1, 0, 0, 20)
Drag.BackgroundTransparency = 1
Drag.Text = ""
Drag.Parent = Frame

local dragging, dragStart, startPos
Drag.MouseButton1Down:Connect(function(input)
    dragging = true
    dragStart = input.Position
    startPos = Frame.Position
    input.Changed:Connect(function()
        if input.UserInputState == Enum.UserInputState.End then
            dragging = false
        end
    end)
end)
Drag.MouseMoved:Connect(function(input)
    if dragging then
        local delta = input.Position - dragStart
        Frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

local CloseButton = Instance.new("TextButton")
CloseButton.Size = UDim2.new(0, 20, 0, 20)
CloseButton.Position = UDim2.new(1, -25, 0, 0)
CloseButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
CloseButton.Text = "X"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextSize = 14
CloseButton.Parent = Frame

local closeGlow = Instance.new("UIStroke")
closeGlow.Thickness = 2
closeGlow.Color = Color3.fromRGB(255, 0, 0)
closeGlow.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
closeGlow.Parent = CloseButton
CloseButton.MouseEnter:Connect(function() TweenService:Create(closeGlow, TweenInfo.new(0.3), {Color = Color3.fromRGB(255, 50, 50)}):Play() end)
CloseButton.MouseLeave:Connect(function() TweenService:Create(closeGlow, TweenInfo.new(0.3), {Color = Color3.fromRGB(255, 0, 0)}):Play() end)
CloseButton.MouseButton1Click:Connect(function()
    TweenService:Create(Frame, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
    task.wait(0.5)
    ScreenGui.Enabled = false
end)

local StatusLabel = Instance.new("TextLabel")
StatusLabel.Size = UDim2.new(1, -10, 0, 25)
StatusLabel.Position = UDim2.new(0, 5, 0, 25)
StatusLabel.BackgroundTransparency = 1
StatusLabel.Text = "Target: None"
StatusLabel.TextColor3 = Color3.fromRGB(0, 255, 0)
StatusLabel.TextSize = 18
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.TextXAlignment = Enum.TextXAlignment.Left
StatusLabel.Parent = Frame

local PlayerDropdownButton = Instance.new("TextButton")
PlayerDropdownButton.Size = UDim2.new(1, -10, 0, 30)
PlayerDropdownButton.Position = UDim2.new(0, 5, 0, 100)
PlayerDropdownButton.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
PlayerDropdownButton.Text = "Select Target"
PlayerDropdownButton.TextColor3 = Color3.fromRGB(255, 255, 255)
PlayerDropdownButton.TextSize = 16
PlayerDropdownButton.Font = Enum.Font.Code
PlayerDropdownButton.Parent = Frame

local dropdownButtonStroke = Instance.new("UIStroke")
dropdownButtonStroke.Thickness = 1
dropdownButtonStroke.Color = Color3.fromRGB(0, 0, 255)
dropdownButtonStroke.Parent = PlayerDropdownButton

local DropdownFrame = Instance.new("Frame")
DropdownFrame.Size = UDim2.new(1, -10, 0, 100)
DropdownFrame.Position = UDim2.new(0, 5, 0, 135)
DropdownFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
DropdownFrame.BackgroundTransparency = 0.1
DropdownFrame.ClipsDescendants = true
DropdownFrame.Visible = false
DropdownFrame.Parent = Frame

local dropdownFrameStroke = Instance.new("UIStroke")
dropdownFrameStroke.Color = Color3.fromRGB(0, 0, 255)
dropdownFrameStroke.Parent = DropdownFrame

local DropdownList = Instance.new("ScrollingFrame")
DropdownList.Size = UDim2.new(1, 0, 1, 0)
DropdownList.Position = UDim2.new(0, 0, 0, 0)
DropdownList.BackgroundTransparency = 1
DropdownList.ScrollBarThickness = 4
DropdownList.Parent = DropdownFrame

local WarpButton = Instance.new("TextButton")
WarpButton.Size = UDim2.new(0.5, -10, 0, 35)
WarpButton.Position = UDim2.new(0, 5, 0, 55)
WarpButton.BackgroundColor3 = Color3.fromRGB(255, 0, 0)
WarpButton.Text = "WARP"
WarpButton.TextColor3 = Color3.fromRGB(255, 255, 255)
WarpButton.TextSize = 18
WarpButton.Font = Enum.Font.Code
WarpButton.Parent = Frame

local SpyButton = Instance.new("TextButton")
SpyButton.Size = UDim2.new(0.5, -10, 0, 35)
SpyButton.Position = UDim2.new(0.5, 5, 0, 55)
SpyButton.BackgroundColor3 = Color3.fromRGB(0, 100, 255)
SpyButton.Text = "SPY"
SpyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
SpyButton.TextSize = 18
SpyButton.Font = Enum.Font.Code
SpyButton.Parent = Frame

-- Variables
local isCameraMode = false
local originalCameraCFrame = nil
local cameraTarget = nil
local selectedPlayer = nil
local isGuiVisible = false
local yaw = 0
local pitch = 0
local zoomDistance = 10 -- Default zoom distance
local minZoom = 5
local maxZoom = 20
local cameraSpeed = 0.03 -- Speed for WASD camera rotation
local isWPressed = false
local isAPressed = false
local isSPressed = false
local isDPressed = false
local targetLostDebounce = false -- Debounce for target loss

-- Function to update dropdown
local function updateDropdown()
    for _, child in pairs(DropdownList:GetChildren()) do
        if child:IsA("TextButton") then child:Destroy() end
    end
    
    local players = Players:GetPlayers()
    local yOffset = 0
    for _, player in pairs(players) do
        if player ~= LocalPlayer and player.Character then
            local button = Instance.new("TextButton")
            button.Size = UDim2.new(1, -10, 0, 25)
            button.Position = UDim2.new(0, 5, 0, yOffset)
            button.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
            button.Text = player.Name
            button.TextColor3 = Color3.fromRGB(255, 255, 255)
            button.Parent = DropdownList
            
            button.MouseButton1Click:Connect(function()
                selectedPlayer = player
                StatusLabel.Text = "Target: " .. player.Name
                PlayerDropdownButton.Text = player.Name
                DropdownFrame.Visible = false
            end)
            yOffset = yOffset + 30
        end
    end
    DropdownList.CanvasSize = UDim2.new(0, 0, 0, yOffset)
end

-- Camera and Teleport Functions
local function moveCameraToPlayer(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("Head") then
        StatusLabel.Text = "Target: Invalid or no head"
        warn("Invalid target or target has no head.")
        return false
    end
    isCameraMode = true
    originalCameraCFrame = Camera.CFrame
    cameraTarget = targetPlayer
    Camera.CameraType = Enum.CameraType.Scriptable
    yaw = 0
    pitch = 0
    zoomDistance = 10
    UserInputService.MouseBehavior = Enum.MouseBehavior.Default
    SpyButton.Text = "STOP" -- Force button text update
    print("Set SpyButton.Text to STOP") -- Debug
    task.defer(function() SpyButton.Text = "STOP" end) -- Ensure UI update
    ContextActionService:BindActionAtPriority("SpyCameraControlW", function(name, state)
        if UserInputService:GetFocusedTextBox() then return Enum.ContextActionResult.Pass end
        isWPressed = (state == Enum.UserInputState.Begin)
        return Enum.ContextActionResult.Sink
    end, false, 2000, Enum.KeyCode.W)
    ContextActionService:BindActionAtPriority("SpyCameraControlA", function(name, state)
        if UserInputService:GetFocusedTextBox() then return Enum.ContextActionResult.Pass end
        isAPressed = (state == Enum.UserInputState.Begin)
        return Enum.ContextActionResult.Sink
    end, false, 2000, Enum.KeyCode.A)
    ContextActionService:BindActionAtPriority("SpyCameraControlS", function(name, state)
        if UserInputService:GetFocusedTextBox() then return Enum.ContextActionResult.Pass end
        isSPressed = (state == Enum.UserInputState.Begin)
        return Enum.ContextActionResult.Sink
    end, false, 2000, Enum.KeyCode.S)
    ContextActionService:BindActionAtPriority("SpyCameraControlD", function(name, state)
        if UserInputService:GetFocusedTextBox() then return Enum.ContextActionResult.Pass end
        isDPressed = (state == Enum.UserInputState.Begin)
        return Enum.ContextActionResult.Sink
    end, false, 2000, Enum.KeyCode.D)
    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        LocalPlayer.Character.Humanoid.WalkSpeed = 0
        LocalPlayer.Character.Humanoid.JumpPower = 0
    end
    -- Disable PlayerScripts to prevent input conflicts
    local playerScripts = LocalPlayer:FindFirstChild("PlayerScripts")
    if playerScripts then
        for _, script in pairs(playerScripts:GetChildren()) do
            if script.Name == "PlayerModule" or script.Name == "ControlModule" then
                script.Disabled = true
            end
        end
    end
    return true
end

local function restoreCamera()
    if originalCameraCFrame then
        Camera.CFrame = originalCameraCFrame
        Camera.CameraType = Enum.CameraType.Custom
        isCameraMode = false
        cameraTarget = nil
        yaw = 0
        pitch = 0
        zoomDistance = 10
        isWPressed = false
        isAPressed = false
        isSPressed = false
        isDPressed = false
        targetLostDebounce = false
        ContextActionService:UnbindAction("SpyCameraControlW")
        ContextActionService:UnbindAction("SpyCameraControlA")
        ContextActionService:UnbindAction("SpyCameraControlS")
        ContextActionService:UnbindAction("SpyCameraControlD")
        UserInputService.MouseBehavior = Enum.MouseBehavior.Default
        SpyButton.Text = "SPY" -- Force button text update
        print("Set SpyButton.Text to SPY") -- Debug
        task.defer(function() SpyButton.Text = "SPY" end) -- Ensure UI update
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            LocalPlayer.Character.Humanoid.WalkSpeed = 16
            LocalPlayer.Character.Humanoid.JumpPower = 50
        end
        -- Re-enable PlayerScripts
        local playerScripts = LocalPlayer:FindFirstChild("PlayerScripts")
        if playerScripts then
            for _, script in pairs(playerScripts:GetChildren()) do
                if script.Name == "PlayerModule" or script.Name == "ControlModule" then
                    script.Disabled = false
                end
            end
        end
    end
end

local function teleportToPlayer(targetPlayer)
    if not targetPlayer or not targetPlayer.Character or not targetPlayer.Character:FindFirstChild("HumanoidRootPart") then return end
    local myRoot = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not myRoot then return end
    myRoot.CFrame = targetPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 3, 0)
end

-- Mouse control for zoom
UserInputService.InputChanged:Connect(function(input)
    if isCameraMode and input.UserInputType == Enum.UserInputType.MouseWheel then
        zoomDistance = math.clamp(zoomDistance - input.Position.Z * 2, minZoom, maxZoom)
    end
end)

RunService.RenderStepped:Connect(function()
    if isCameraMode and cameraTarget and cameraTarget.Character and cameraTarget.Character:FindFirstChild("Head") then
        Camera.CameraType = Enum.CameraType.Scriptable -- Force Scriptable mode
        if Camera.CameraType ~= Enum.CameraType.Scriptable then
            Camera.CameraType = Enum.CameraType.Scriptable -- Re-force if overridden
        end
        UserInputService.MouseBehavior = Enum.MouseBehavior.Default -- Force mouse freedom
        local targetPos = cameraTarget.Character.Head.Position
        if isWPressed then
            pitch = math.clamp(pitch - cameraSpeed, -math.pi / 3, math.pi / 3)
        end
        if isSPressed then
            pitch = math.clamp(pitch + cameraSpeed, -math.pi / 3, math.pi / 3)
        end
        if isAPressed then
            yaw = yaw + cameraSpeed
        end
        if isDPressed then
            yaw = yaw - cameraSpeed
        end
        local cameraPos = targetPos + CFrame.Angles(0, yaw, 0) * CFrame.Angles(pitch, 0, 0) * Vector3.new(0, 5, zoomDistance)
        Camera.CFrame = CFrame.new(cameraPos, targetPos)
        targetLostDebounce = false
    elseif isCameraMode and not targetLostDebounce then
        targetLostDebounce = true
        StatusLabel.Text = "Target: Lost (Waiting 3s)"
        task.wait(3) -- Debounce to avoid instant reset
        if isCameraMode and (not cameraTarget or not cameraTarget.Character or not cameraTarget.Character:FindFirstChild("Head")) then
            StatusLabel.Text = "Target: Lost"
            restoreCamera()
            SpyButton.Text = "SPY"
            print("Target lost, set SpyButton.Text to SPY")
            task.defer(function() SpyButton.Text = "SPY" end)
        end
    end
end)

-- GUI and Keybinds
UserInputService.InputBegan:Connect(function(input, gpe)
    if not gpe and input.KeyCode == Enum.KeyCode.G then
        isGuiVisible = not isGuiVisible
        if isGuiVisible then
            ScreenGui.Enabled = true
            TweenService:Create(Frame, TweenInfo.new(0.5), {BackgroundTransparency = 0.2}):Play()
        else
            DropdownFrame.Visible = false
            TweenService:Create(Frame, TweenInfo.new(0.5), {BackgroundTransparency = 1}):Play()
            task.wait(0.5)
            ScreenGui.Enabled = false
        end
    end
end)

PlayerDropdownButton.MouseButton1Click:Connect(function()
    DropdownFrame.Visible = not DropdownFrame.Visible
    if DropdownFrame.Visible then
        updateDropdown()
    end
end)

WarpButton.MouseButton1Click:Connect(function() if isGuiVisible and selectedPlayer then teleportToPlayer(selectedPlayer) end end)
SpyButton.MouseButton1Click:Connect(function()
    if isGuiVisible then
        if isCameraMode then
            restoreCamera()
            SpyButton.Text = "SPY"
            print("Clicked STOP, set SpyButton.Text to SPY")
            task.defer(function() SpyButton.Text = "SPY" end)
        elseif selectedPlayer then
            if moveCameraToPlayer(selectedPlayer) then
                SpyButton.Text = "STOP"
                print("Clicked SPY, set SpyButton.Text to STOP")
                task.defer(function() SpyButton.Text = "STOP" end)
            else
                StatusLabel.Text = "Target: None (Select a valid player)"
                warn("Failed to enter SPY mode: Invalid target")
            end
        else
            StatusLabel.Text = "Target: None (Select a player)"
            warn("No player selected to spy on.")
        end
    end
end)

LocalPlayer.CharacterAdded:Connect(function()
    task.wait(1)
    if isCameraMode then
        StatusLabel.Text = "Target: Lost"
        restoreCamera()
        SpyButton.Text = "SPY"
        print("Character respawned, set SpyButton.Text to SPY")
        task.defer(function() SpyButton.Text = "SPY" end)
    end
end)

print("CyberSpy GUI loaded! Press G to toggle.")